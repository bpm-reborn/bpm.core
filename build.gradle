import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.162'

    // Adds the Kotlin Gradle plugin
    id 'org.jetbrains.kotlin.jvm' version '2.0.10'
    // OPTIONAL Kotlin Serialization plugin
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.10'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}


// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
compileKotlin.compilerOptions.jvmTarget = JvmTarget.JVM_21

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    libraries
    // This will make sure that all dependencies that you add to the libraries configuration will also be added to the implementation configuration
    // This way, you only need one dependency declaration for both runtime and compile dependencies
    implementation.extendsFrom libraries
}

configurations.libraries {
    transitive = true
}

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        dependencies {
            runtime project.configurations.libraries
        }
        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        // set the ram to 8GB
        jvmArguments.add('-Xmx8G')
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
    // NeoForged MDK includes mavenLocal by default
    mavenLocal()
    // REQUIRED for using Kotlin for Forge
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
}
configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.jetbrains.kotlin') {
            details.useVersion "2.0.10"
        }
    }
}

jarJar.enable()

dependencies {

    // Use the latest version of NeoForge
    implementation "net.neoforged:neoforge:${neo_version}"

    // Must use the '-neoforge' version on NeoForge. If on regular forge, omit the '-neoforge'
    libraries('org.jetbrains.kotlin:kotlin-stdlib:2.0.10')
    jarJar('org.jetbrains.kotlin:kotlin-stdlib:2.0.10')
    libraries('org.jetbrains.kotlin:kotlin-reflect:2.0.10')
    jarJar('org.jetbrains.kotlin:kotlin-reflect:2.0.10')
    libraries('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1')
    jarJar('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1')
    libraries('org.jetbrains.kotlinx:kotlinx-serialization-core:1.7.2')
    jarJar('org.jetbrains.kotlinx:kotlinx-serialization-core:1.7.2')
    libraries('org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.2')
    jarJar('org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.2')
    implementation('thedarkcolour:kotlinforforge-neoforge:5.5.0:slim')

    libraries('io.github.spair:imgui-java-binding:1.86.12')
//    libraries('io.github.spair:imgui-java-app:1.86.12')
    jarJar('io.github.spair:imgui-java-binding:1.86.12')
//    jarJar('io.github.spair:imgui-java-app:1.86.12')
    libraries('io.github.spair:imgui-java-lwjgl3:1.86.12') {
        transitive = false
    }
    jarJar('io.github.spair:imgui-java-lwjgl3:1.86.12') {
        transitive = false
    }
    libraries('io.github.spair:imgui-java-natives-windows:1.86.12')
    jarJar('io.github.spair:imgui-java-natives-windows:1.86.12')
    libraries('io.github.spair:imgui-java-natives-linux:1.86.12')
    jarJar('io.github.spair:imgui-java-natives-linux:1.86.12')
    libraries('io.github.spair:imgui-java-natives-macos:1.86.12')
    jarJar('io.github.spair:imgui-java-natives-macos:1.86.12')
    libraries('com.charleskorn.kaml:kaml-jvm:0.55.0')
    jarJar('com.charleskorn.kaml:kaml-jvm:0.55.0')
    libraries('com.google.code.gson:gson:2.10.1')
    libraries('io.github.classgraph:classgraph:4.8.165')
    jarJar('io.github.classgraph:classgraph:4.8.165')
    jarJar("org.snakeyaml:snakeyaml-engine:2.7")
    libraries("org.commonmark:commonmark:0.23.0")
    jarJar("org.commonmark:commonmark:0.23.0")
    libraries('org.jsoup:jsoup:1.18.1')
    jarJar("org.jsoup:jsoup:1.18.1")

    libraries('party.iroiro.luajava:luajit:4.0.3-SNAPSHOT')
    jarJar('party.iroiro.luajava:luajit:4.0.3-SNAPSHOT')
    libraries('party.iroiro.luajava:luajava:4.0.2')
    jarJar('party.iroiro.luajava:luajava:4.0.2')
    libraries('org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r')
    jarJar('org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r')
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
